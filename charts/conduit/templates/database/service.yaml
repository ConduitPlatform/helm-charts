{{ $moduleSettings := index .Values "module-settings" }}
apiVersion: v1
kind: Service
metadata:
  name: {{ template "conduit-helm.database.fullname" . }}
  labels:
{{ include "conduit-helm.labels" . | indent 4 }}
    app: {{ template "conduit-helm.database.fullname" . }}
    {{- if .Values.database.metrics.enabled }}
    metrics.conduit.dev/enabled: "true"
    {{- end }}
  {{- if .Values.database.service.labels }}
    {{- toYaml .Values.database.service.labels | nindent 4 }}
  {{- end }}
  annotations:
    {{- if and .Values.database.metrics.enabled .Values.prometheus.setup (not .Values.global.enableServiceMonitors) (not .Values.database.metrics.serviceMonitor.enabled) }}
    prometheus.io/scrape: "true"
    prometheus.io/port: "{{ default $moduleSettings.metrics.service.port .Values.database.metrics.service.port }}"
    prometheus.io/path: /metrics
    prometheus.io/scheme: http
    {{- end }}
    {{- if .Values.database.service.annotations }}
    {{- toYaml .Values.database.service.annotations | nindent 4 }}
    {{- end }}
spec:
  selector:
{{ include "conduit-helm.selectorLabels" . | indent 4 }}
    app: {{ template "conduit-helm.database.fullname" . }}
  ports:
    - protocol: TCP
      port: {{ .Values.database.service.tcp_port }}
      targetPort: {{ default .Values.global.config.grpc_port .Values.database.containerPort }}
      name: tcp
{{- if .Values.database.metrics.enabled }}
    - port: {{ .Values.database.metrics.service.port }}
      name: {{ .Values.database.metrics.service.name }}
      targetPort:  {{ .Values.global.config.metrics_port }}
{{- end }}
  type: ClusterIP
