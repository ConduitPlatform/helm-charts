## Conduit Helm configuration
## Ref: https://github.com/ConduitPlatform/helm-charts
##

# -- Provide a name in place of `conduit`
nameOverride: "conduit"
# -- String to fully override `"conduit-helm.fullname"`
fullnameOverride: ""
# -- Override the Kubernetes version, which is used to evaluate certain manifests
kubeVersionOverride: ""
# -- Override for the Ingress API version
apiVersionOverrides:
  ingress: ""

# -- Global section
global:
  image:
    # -- Global repository option
    repository: conduitplatform
    # -- Overrides the global Conduit image tag whose default is the chart appVersion
    tag: v0.16.17
    # -- If defined, a imagePullPolicy applied to all Conduit deployments
    imagePullPolicy: IfNotPresent

  # -- Configs
  config:
    # -- GRPC port
    grpc_port: 5000
    # -- Metrics port, used for Prometheus
    metrics_port: 9100
    # -- Override for "conduit-helm.conduit.url"
    conduit_url: ""
  secret:
    # -- Master Secret override. Must be given in b64 format.
    MASTER_KEY:
    # -- Optional GRPC Key option
    grpc_enable: true
    # -- Optional GRPC Key override. Must be given in b64 format.
    GRPC_KEY:
  enableServiceMonitors: false
  # -- (Optional) list of image pull secrets for all pods
  imagePullSecrets: []

# -- ServiceAccount configuration
serviceAccount:
  # -- Specifies whether a ServiceAccount should be created
  create: true
  # -- Annotations to add to the ServiceAccount
  annotations: {}
  # -- The name of the ServiceAccount. If not set and create is true, a name is generated using the fullname template
  name: ""

# -- RBAC configuration
rbac:
  # -- Whether to create Role & RoleBinding granting in-namespace permissions to the ServiceAccount
  create: false
  # -- Custom RBAC rules (overrides default pod-listing example)
  rules: []

# -- Pod-level security context defaults
podSecurityContext: {}
# fsGroup: 2000

# -- Container-level security context defaults
securityContext: {}
#  runAsUser: 1000
#  runAsNonRoot: true
# -- Microservice-specific values

# -- Options for which services to install. You may override the default 'module-settings' below. Image name is required, since every image name is unique.
# -- Metrics.disable flag is used to override the default ServiceMonitor installation, skipping its deployment for a specific service.
# -- You may comment it out, if you wish to enable a specific metrics configuration for a microservice.

install:
  authentication:
    enabled: true
    image:
      name: authentication
    metrics:
      enabled: true
  chat:
    enabled: false
    image:
      name: chat
    metrics:
      enabled: true
  email:
    enabled: false
    image:
      name: email
    metrics:
      enabled: true
  authorization:
    enabled: true
    image:
      name: authorization
    metrics:
      enabled: true
  functions:
    enabled: false
    image:
      name: functions
    metrics:
      enabled: true
  forms:
    enabled: false
    image:
      name: forms
    metrics:
      enabled: true
  notification:
    enabled: true
    image:
      name: push-notifications
    metrics:
      enabled: true
  sms:
    enabled: false
    image:
      name: sms
    metrics:
      enabled: true
  storage:
    enabled: false
    image:
      name: storage
    metrics:
      enabled: true

# -- Default module settings for the microservices (except Admin-UI, Core, Database, Router)
module-settings:
  # -- Extra annotations
  annotations: [ ]

  # -- Number of pods to run
  replicas: 1

  # -- Labels
  podLabels: { }

  # -- Annotations
  podAnnotations: { }

  # -- Resource limits and requests
  resources:
    requests:
      memory: "150Mi"
      cpu: "0"
    limits:
      memory: "500Mi"
      cpu: "1000m"

  # -- Configure for the container port
  containerPort: 5000

  # -- Init containers
  initContainers: [ ]

  # -- Additional command line arguments
  extraArgs: [ ]

  # -- Additional containers to be added
  extraContainers: [ ]

  # -- Extra envFrom
  # @default -- `[]`
  envFrom: [ ]
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  # -- Extra environment variables
  env: [ ]

  # -- Additional volumeMounts
  volumeMounts: [ ]
  # - mountPath: /test-cinder
  #   name: test-volume

  # -- Additional volumes
  volumes: [ ]

  # -- Service configuration
  service:
    # -- Service labels
    labels: { }
    # -- Service annotations
    annotations: { }
    # -- Service tcp port
    tcp_port: 5000

  # -- Metrics service configuration
  metrics:
    # -- Deploy metrics service
    service:
      # -- Metrics service name
      name: metrics
      # -- Metrics service port
      port: 9100
      # -- Metrics service port
      targetPort: 9100
    serviceMonitor:
      # -- enable ServiceMonitor for the service, overrides global.enableServiceMonitors if true
      enabled: false
      # -- Optional name override
      name:
      # -- Prometheus ServiceMonitor namespace
      namespace: ""
      # -- Prometheus ServiceMonitor selector
      selector: { }
      # prometheus: kube-prometheus
      # -- Prometheus ServiceMonitor labels
      additionalLabels: { }
      # -- Prometheus ServiceMonitor interval
      interval: 30s
      # -- Prometheus [RelabelConfigs] to apply to samples before scraping
      relabelings: [ ]
      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
      metricRelabelings: [ ]
      # -- Prometheus ServiceMonitor scheme
      scheme: ""
      # -- Prometheus ServiceMonitor tlsConfig
      tlsConfig: { }
      # -- Prometheus ServiceMonitor namespace

# -- Admin Panel module
admin:
  # -- Optional module.
  enabled: true
  # -- Admin Panel name
  name: admin
  # -- Extra annotations
  annotations: [ ]

  # -- Number of Admin Panel pods to run
  replicas: 1

  # -- Labels to be added to admin pods
  podLabels: { }

  # -- Annotations to be added to admin pods
  podAnnotations: { }

  image:
    # -- Image name
    name: conduit-ui
    # -- Intended images are from Dockerhub registry. Reminder: use tag latest for them.
    repository: ""
    # -- Tag to use for the Admin Panel image
    # @default -- `""` (defaults to global.image.tag)
    tag: experimental
    # -- Image pull policy for the Admin Panel image
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: ""

  # -- Resource limits and requests for the Admin Panel
  resources:
    requests:
      memory: "300Mi"
      cpu: "0"
    limits:
      memory: "500Mi"
      cpu: "1000m"

  # -- Init containers to add to the admin pod
  initContainers: [ ]

  # -- Additional command line arguments to pass to the admin pod
  extraArgs: [ ]

  # -- Additional containers to be added to the admin pod
  extraContainers: [ ]

  # -- Extra envFrom to pass to the Admin Panel
  # @default -- `[]`
  envFrom: [ ]
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  # -- Extra environment variables to pass to the Admin Panel
  env: [ ]

  # -- Additional volumeMounts to the Admin main container
  volumeMounts: [ ]
  # - mountPath: /test-cinder
  #   name: test-volume

  # -- Additional volumes to the Admin pod
  volumes: [ ]

  # -- Admin service configuration
  service:
    # -- Admin service labels
    labels: { }
    # -- Admin service annotations
    annotations: { }
    # -- Admin service http port
    http_port: 80
    # -- Admin service type
    type: ClusterIP
    # -- Admin service http port for NodePort service type (only if `admin.service.type` is set to "NodePort")
    nodePort: 31867
    # -- LoadBalancer will get created with the IP specified in this field
    loadBalancerIP: ""

  # -- Enable an ingress resource for the Admin Panel
  ingress:
    enabled: false

    # -- Additional ingress annotations
    annotations:
    # kubernetes.io/ingress.class: nginx

    # -- Defines which ingress controller will implement the resource
    ingressClassName: ""

    # -- Hostnames must be provided if Ingress is enabled.
    hostName: ""

    # -- Additional ingress paths
    extraPaths: [ ]
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation
    ## for Kubernetes >=1.19 (when "networking.k8s.io/v1" is used)
    # - path: /*
    #   pathType: Prefix
    #   backend:
    #     service:
    #       name: ssl-redirect
    #       port:
    #         name: use-annotation

    # -- Ingress TLS configuration
    tls: [ ]
    # - hosts:
    #     - conduit-helm-admin.dev.quintessential.gr
    #   secretName: conduit-helm-admin-tls

# -- Core module
core:
  # -- Core name
  name: core
  # -- Extra annotations
  annotations: [ ]

  # -- Number of Core pods to run
  replicas: 1

  # -- Labels to be added to core pods
  podLabels: { }

  # -- Annotations to be added to core pods
  podAnnotations: { }

  image:
    # -- Image name
    name: conduit
    # -- Intended images are from Dockerhub registry. Reminder: use tag latest for them.
    repository: ""
    # -- Tag to use for the Core image
    # @default -- `""` (defaults to global.image.tag)
    tag: ""
    # -- Image pull policy for the Core image
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: ""

  # -- Resource limits and requests for Core
  resources:
    requests:
      memory: "300Mi"
      cpu: "100m"
    limits:
      memory: "500Mi"
      cpu: "200m"

  # -- Configure for the container port
  containerPort: 5000

  # -- Init containers to add to the core pod
  initContainers: [ ]

  # -- Additional command line arguments to pass to the core pod
  extraArgs: [ ]

  # -- Additional containers to be added to the core pod
  extraContainers: [ ]

  # -- Extra envFrom to pass to the core
  # @default -- `[]`
  envFrom: [ ]
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  # -- Extra environment variables to pass to the core
  env: [ ]

  # -- Additional volumeMounts to the core main container
  volumeMounts: [ ]
  # - mountPath: /test-cinder
  #   name: test-volume

  # -- Additional volumes to the core pod
  volumes: [ ]

  # -- Core service configuration
  service:
    # -- Core service labels
    labels: { }
    # -- Core service annotations
    annotations: { }
    # -- Core service tcp port
    tcp_port: 80
    # -- Core service grpc port
    grpc_port: 5000
    # -- Core service socket port
    socket_port: 3001
    # -- Core service type
    type: ClusterIP
    # -- Core service http port for NodePort service type (only if `core.service.type` is set to "NodePort")
    nodePort: 31868
    # -- LoadBalancer will get created with the IP specified in this field
    loadBalancerIP: ""

  # -- Core metrics service configuration
  metrics:
    # -- Deploy metrics service
    enabled: true
    service:
      # -- Metrics service name
      name: metrics
      # -- Metrics service port
      port: 9100
      # -- Metrics service port
      targetPort: 9100
    serviceMonitor:
      # -- enable ServiceMonitor for the service, overrides global.enableServiceMonitors if true
      enabled: false
      # core
      name:
      # -- Prometheus ServiceMonitor namespace
      namespace: ""
      # -- Prometheus ServiceMonitor selector
      selector: { }
      # prometheus: kube-prometheus
      # -- Prometheus ServiceMonitor labels
      additionalLabels: { }
      # -- Prometheus ServiceMonitor interval
      interval: 30s
      # -- Prometheus [RelabelConfigs] to apply to samples before scraping
      relabelings: [ ]
      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
      metricRelabelings: [ ]
      # -- Prometheus ServiceMonitor scheme
      scheme: ""
      # -- Prometheus ServiceMonitor tlsConfig
      tlsConfig: { }
      # -- Prometheus ServiceMonitor namespace

  # -- Enable an ingress resource for the Core
  ingress:
    enabled: false

    # -- Additional ingress annotations
    annotations:
    # kubernetes.io/ingress.class: nginx

    # -- Defines which ingress controller will implement the resource
    ingressClassName: ""

    # -- Hostnames must be provided if Ingress is enabled.
    hostName: ""

    # -- Additional ingress paths
    extraPaths: [ ]
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation
    ## for Kubernetes >=1.19 (when "networking.k8s.io/v1" is used)
    # - path: /*
    #   pathType: Prefix
    #   backend:
    #     service:
    #       name: ssl-redirect
    #       port:
    #         name: use-annotation

    # -- Ingress TLS configuration
    tls: [ ]
    # - hosts:
    #     - conduit-helm-admin-api.dev.quintessential.gr
    #   secretName: conduit-helm-admin-api-tls

  # -- Alternative option for the host URL if ingress host is not defined.
  hostName: ""

# -- Database module
database:
  # -- Database name
  name: database-provider
  # -- Extra annotations
  annotations: [ ]

  # -- Number of Database pods to run
  replicas: 1

  # -- Labels to be added to database pods
  podLabels: { }

  # -- Annotations to be added to database pods
  podAnnotations: { }

  image:
    # -- Image name
    name: database
    # -- Intended images are from Dockerhub registry. Reminder: use tag latest for them.
    repository: ""
    # -- Tag to use for the Database image
    # @default -- `""` (defaults to global.image.tag)
    tag: ""
    # -- Image pull policy for the Database image
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: ""

  # -- Resource limits and requests for Database
  resources:
    requests:
      memory: "300Mi"
      cpu: "100m"
    limits:
      memory: "500Mi"
      cpu: "1000m"

  # -- Configure for the container port
  containerPort: 5000

  # -- Init containers to add to the database pod
  initContainers: [ ]

  # -- Additional command line arguments to pass to the database pod
  extraArgs: [ ]

  # -- Additional containers to be added to the database pod
  extraContainers: [ ]

  # -- Extra envFrom to pass to the database
  # @default -- `[]`
  envFrom: [ ]
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  # -- Extra environment variables to pass to the database
  env: [ ]

  # -- Additional volumeMounts to the database main container
  volumeMounts: [ ]
  # - mountPath: /test-cinder
  #   name: test-volume

  # -- Additional volumes to the database pod
  volumes: [ ]

  # -- Database service configuration
  service:
    # -- Database service labels
    labels: { }
    # -- Database service annotations
    annotations: { }
    # -- Database service tcp port
    tcp_port: 5000

  # -- Database metrics service configuration
  metrics:
    # -- Deploy metrics service
    enabled: true
    service:
      # -- Metrics service name
      name: metrics
      # -- Metrics service port
      port: 9100
      # -- Metrics service port
      targetPort: 9100
    serviceMonitor:
      # -- enable ServiceMonitor for the service, overrides global.enableServiceMonitors if true
      enabled: false
      # database-provider
      name:
      # -- Prometheus ServiceMonitor namespace
      namespace: ""
      # -- Prometheus ServiceMonitor selector
      selector: { }
      # prometheus: kube-prometheus
      # -- Prometheus ServiceMonitor labels
      additionalLabels: { }
      # -- Prometheus ServiceMonitor interval
      interval: 30s
      # -- Prometheus [RelabelConfigs] to apply to samples before scraping
      relabelings: [ ]
      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
      metricRelabelings: [ ]
      # -- Prometheus ServiceMonitor scheme
      scheme: ""
      # -- Prometheus ServiceMonitor tlsConfig
      tlsConfig: { }
      # -- Prometheus ServiceMonitor namespace

# -- Router module
router:
  # -- Optional module.
  enabled: true
  # -- Router name
  name: router
  # -- Extra annotations
  annotations: [ ]

  # -- Number of Router pods to run
  replicas: 1

  # -- Labels to be added to router pods
  podLabels: { }

  # -- Annotations to be added to router pods
  podAnnotations: { }

  image:
    # -- Image name
    name: router
    # -- Intended images are from Dockerhub registry. Reminder: use tag latest for them.
    repository: ""
    # -- Tag to use for the Router image
    # @default -- `""` (defaults to global.image.tag)
    tag: ""
    # -- Image pull policy for the Router image
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: ""

  # -- Resource limits and requests for Router
  resources:
    requests:
      memory: "300Mi"
      cpu: "100m"
    limits:
      memory: "500Mi"
      cpu: "200m"

  # -- Configure for the container port
  containerPort: 5000

  # -- Init containers to add to the router pod
  initContainers: [ ]

  # -- Additional command line arguments to pass to the router pod
  extraArgs: [ ]

  # -- Additional containers to be added to the router pod
  extraContainers: [ ]

  # -- Extra envFrom to pass to the router
  # @default -- `[]`
  envFrom: [ ]
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  # -- Extra environment variables to pass to the router
  env: [ ]

  # -- Additional volumeMounts to the router main container
  volumeMounts: [ ]
  # - mountPath: /test-cinder
  #   name: test-volume

  # -- Additional volumes to the router pod
  volumes: [ ]

  # -- Router service configuration
  service:
    # -- Router service labels
    labels: { }
    # -- Router service annotations
    annotations: { }
    # -- Router service tcp port
    tcp_port: 80
    # -- Router service grpc port
    grpc_port: 5000
    # -- Router service socket port
    socket_port: 3001
    # -- Router service type
    type: ClusterIP
    # -- Router service http port for NodePort service type (only if `router.service.type` is set to "NodePort")
    nodePort: 31869
    # -- LoadBalancer will get created with the IP specified in this field
    loadBalancerIP: ""

  # -- Router metrics service configuration
  metrics:
    # -- Deploy metrics service
    enabled: true
    service:
      # -- Metrics service name
      name: metrics
      # -- Metrics service port
      port: 9100
      # -- Metrics service port
      targetPort: 9100
    serviceMonitor:
      # -- enable ServiceMonitor for the service, overrides global.enableServiceMonitors if true
      enabled: false
      # router
      name:
      # -- Prometheus ServiceMonitor namespace
      namespace: ""
      # -- Prometheus ServiceMonitor selector
      selector: { }
      # prometheus: kube-prometheus
      # -- Prometheus ServiceMonitor labels
      additionalLabels: { }
      # -- Prometheus ServiceMonitor interval
      interval: 30s
      # -- Prometheus [RelabelConfigs] to apply to samples before scraping
      relabelings: [ ]
      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
      metricRelabelings: [ ]
      # -- Prometheus ServiceMonitor scheme
      scheme: ""
      # -- Prometheus ServiceMonitor tlsConfig
      tlsConfig: { }
      # -- Prometheus ServiceMonitor namespace

  # -- Enable an ingress resource for the Router
  ingress:
    enabled: false

    # -- Additional ingress annotations
    annotations:
    # kubernetes.io/ingress.class: nginx

    # -- Defines which ingress controller will implement the resource
    ingressClassName: ""

    # -- Hostnames must be provided if Ingress is enabled.
    hostName: ""

    # -- Additional ingress paths
    extraPaths: [ ]
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation
    ## for Kubernetes >=1.19 (when "networking.k8s.io/v1" is used)
    # - path: /*
    #   pathType: Prefix
    #   backend:
    #     service:
    #       name: ssl-redirect
    #       port:
    #         name: use-annotation

    # -- Ingress TLS configuration
    tls: [ ]
    # - hosts:
    #     - conduit-helm-core.dev.quintessential.gr
    #   secretName: conduit-helm-core-tls

  # -- Alternative option for the host URL if ingress host is not defined.
  hostName: ""

# -- External apps needed for Conduit

# -- Default Redis module
redis:
  # -- Optional module. If set to false, you may specify an external redis URL in the following section.
  enabled: true
  # -- Redis name
  name: redis
  # -- Extra annotations
  annotations: [ ]

  # -- Number of Redis pods to run
  replicas: 1

  # -- Labels to be added to redis pods
  podLabels: { }

  # -- Annotations to be added to redis pods
  podAnnotations: { }

  image:
    name: redis
    # -- Tag to use for the redis image
    tag: latest
    # -- Image pull policy for the redis image.
    # @default -- IfNotPresent
    imagePullPolicy: IfNotPresent

  port: 6379

  # -- Init containers to add to the redis pod
  initContainers: [ ]

  # -- Additional command line arguments to pass to the redis pod
  extraArgs: [ ]

  # -- Additional containers to be added to the redis pod
  extraContainers: [ ]

  # -- Extra envFrom to pass to the redis
  # @default -- `[]`
  envFrom: [ ]
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  # -- Extra environment variables to pass to the redis
  env: [ ]

  # -- Additional volumeMounts to the redis main container
  volumeMounts: [ ]
  # - mountPath: /test-cinder
  #   name: test-volume

  # -- Additional volumes to the redis pod
  volumes: [ ]

  # -- Storage service configuration
  service:
    # -- Storage service labels
    labels: { }
    # -- Storage service annotations
    annotations: { }

# -- External Redis section
externalRedis:
  # -- External Redis server URL
  host: ""
  # -- External Redis password
  password: ""
  # -- External Redis server port
  port: 6379
  # -- The name of an existing secret with Redis credentials (must contain key `redis-password`).
  # When it's set, the `externalRedis.password` parameter is ignored
  existingSecret: ""
  # -- External Redis Secret annotations
  secretAnnotations: { }

# -- Default Mongo module
mongodb:
  # -- Optional module. If set to false, specify an external MongoDB or Postgres URL in the following section.
  enabled: true
  # -- MongoDB name
  name: mongodb
  # -- Extra annotations
  annotations: [ ]

  # -- Number of Mongo pods to run
  replicas: 1

  # -- Labels to be added to mongo pods
  podLabels: { }

  # -- Annotations to be added to mongo pods
  podAnnotations: { }

  image:
    name: mongo
    # -- Tag to use for the mongo image
    tag: latest
    # -- Image pull policy for the mongo image.
    # @default -- IfNotPresent
    imagePullPolicy: IfNotPresent

  # -- Configure for the container port
  port: 27017

  # -- Persistence configuration
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    storageClass: ""

  # -- Init containers to add to the mongo pod
  initContainers: [ ]

  # -- Additional command line arguments to pass to the mongo pod
  extraArgs: [ ]

  # -- Additional containers to be added to the mongo pod
  extraContainers: [ ]

  # -- Extra envFrom to pass to the mongodb
  # @default -- `[]`
  envFrom: [ ]
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  # -- Extra environment variables to pass to the mongodb
  env: [ ]

  # -- Additional volumeMounts to the mongodb main container
  volumeMounts:
    - name: persistent-storage
      mountPath: /data/db

  # -- Additional volumes to the mongodb pod
  volumes:
    - name: persistent-storage
      persistentVolumeClaim:
        claimName: mongo-pv-claim

  # -- Mongo service configuration
  service:
    # -- Mongo service labels
    labels: { }
    # -- Mongo service annotations
    annotations: { }

# -- External Database section
externalDatabase:
  # -- Database type. Can be 'mongodb' or 'postgres'.
  type: ""
  # -- URL for external Mongo or Postgres DB. Must be given in b64 format.
  url: ""

# -- Loki dependency configuration
loki:
  setup: true

  loki:
    # -- Single tenant deployment needed for loki
    auth_enabled: false

    # -- The following sections are needed to deploy loki with the bare minimum

    commonConfig:
      replication_factor: 1

    storage:
      type: "filesystem"
    rulerConfig:
      storage:
        type: local

    # -- Override for Loki service port
    server:
      http_listen_port: 3100

  # -- Self Monitoring disabled by default. You may enable it for additional logs
  monitoring:
    selfMonitoring:
      enabled: false
      grafanaAgent:
        installOperator: false
      lokiCanary:
        enabled: false

# -- External Loki section
externalLoki:
  url: ""

# -- Prometheus dependency configuration
prometheus:
  setup: true

  server:
    service:
      servicePort: 9100

  alertmanager:
    enabled: false

  kube-state-metrics:
    enabled: false

  prometheus-node-exporter:
    enabled: false
  prometheus-pushgateway:
    enabled: false

# -- External Prometheus section
externalPrometheus:
  url: ""

# -- Horizontal Pod Autoscaler global defaults
hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# -- Pod Disruption Budget global defaults
pdb:
  enabled: false
  minAvailable: 1 # alternatively set maxUnavailable

# -- NetworkPolicy global defaults
networkPolicy:
  enabled: false
  ingress: []
  egress: []
